@* File: Views/BaoCao/Index.cshtml *@
@model HeThongTimViec.ViewModels.BaoCao.DanhSachBaoCaoViewModel
@using HeThongTimViec.Extensions 
@using HeThongTimViec.Utils    
@using HeThongTimViec.Models    
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
    ViewData["Title"] = "Báo cáo của tôi";
    var requestToken = antiforgery.GetAndStoreTokens(Context).RequestToken;
    var defaultCompanyLogo = "/images/default-company.png";
    var defaultAvatar = "/images/default-avatar.png";
}
<link rel="stylesheet" href="~/css/baocao.css" asp-append-version="true" />
<div class="container page-container-custom">
    <div class="content-wrapper animate__animated animate__fadeIn">
        <!-- Page Header -->
        <div class="page-header-custom animate__animated animate__fadeInDown">
            <div class="header-icon-custom">
                <i class="fas fa-flag"></i>
            </div>
            <div>
                <h1>@ViewData["Title"]</h1>
                <p>Danh sách các báo cáo vi phạm bạn đã gửi.</p>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="filter-card animate__animated animate__fadeInUp" style="animation-delay: 0.1s;">
            @await Html.PartialAsync("_BaoCaoFilterPartial", Model)
        </div>

        <!-- Alert Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show animate__animated animate__fadeIn" role="alert">
                <i class="fas fa-check-circle me-2"></i> @TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show animate__animated animate__fadeIn" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i> @TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <!-- Report List -->
        @if (Model.BaoCaos != null && Model.BaoCaos.Any())
        {
            <div class="reports-container animate__animated animate__fadeInUp" style="animation-delay: 0.2s;">
                <h5 class="text-muted mb-3">
                    <i class="fas fa-list-ul me-2"></i> Tìm thấy @Model.BaoCaos.TotalCount báo cáo
                </h5>
                
                <div id="reportListContainer">
                    @foreach (var (item, index) in Model.BaoCaos.Select((value, i) => (value, i)))
                    {
                        var finalLogoUrl = item.LoaiTkNguoiDang == LoaiTaiKhoan.doanhnghiep
                                            ? (!string.IsNullOrEmpty(item.LogoUrlNhaTuyenDung) ? item.LogoUrlNhaTuyenDung : defaultCompanyLogo)
                                            : (!string.IsNullOrEmpty(item.LogoUrlNhaTuyenDung) ? item.LogoUrlNhaTuyenDung : defaultAvatar);
                        
                        // Các biến UTC được chuẩn bị
                        var ngayBaoCaoUtc = DateTime.SpecifyKind(item.NgayBaoCao, DateTimeKind.Utc);
                        DateTime? ngayXuLyCuaAdminUtc = item.NgayXuLyCuaAdmin.HasValue 
                                                        ? DateTime.SpecifyKind(item.NgayXuLyCuaAdmin.Value, DateTimeKind.Utc) 
                                                        : null;
                        DateTime? ngayHetHanTinTuyenDungUtc = item.NgayHetHanTinTuyenDung.HasValue
                                                        ? DateTime.SpecifyKind(item.NgayHetHanTinTuyenDung.Value, DateTimeKind.Utc)
                                                        : null;

                        <div class="card report-item-card animate__animated animate__fadeInUp"
                             style="animation-delay: @(0.05 + index * 0.05)s; animation-duration: 0.4s;"
                             data-report-id="@item.BaoCaoId">
                            <div class="card-body">
                                <div class="row">
                                    <!-- Logo Section -->
                                    <div class="col-auto d-none d-md-block">
                                        <a asp-controller="TimViec" asp-action="ChiTiet" asp-route-id="@item.TinTuyenDungId" asp-route-tieuDeSeo="@SeoUrlHelper.GenerateSlug(item.TieuDeTinTuyenDung)" class="logo-container">
                                            <img src="@finalLogoUrl" alt="Logo" class="img-fluid"
                                                 onerror="this.onerror=null; this.src='@(item.LoaiTkNguoiDang == LoaiTaiKhoan.doanhnghiep ? defaultCompanyLogo : defaultAvatar)';">
                                        </a>
                                    </div>
                                    
                                    <!-- Main Content Section -->
                                    <div class="col">
                                        <div class="d-flex justify-content-between align-items-start">
                                            <div>
                                                <!-- Job Title -->
                                                <h5 class="report-job-title mb-1">
                                                    <a asp-controller="TimViec" asp-action="ChiTiet" asp-route-id="@item.TinTuyenDungId" asp-route-tieuDeSeo="@SeoUrlHelper.GenerateSlug(item.TieuDeTinTuyenDung)">
                                                        @item.TieuDeTinTuyenDung
                                                    </a>
                                                    @if(item.TinGapTinTuyenDung) {
                                                        <span class="badge bg-danger-soft text-danger ms-1">Gấp</span>
                                                    }
                                                </h5>
                                                
                                                <!-- Company Name -->
                                                <p class="job-info-muted mb-1">
                                                    <i class="fas fa-building fa-fw me-1"></i>@item.TenNhaTuyenDungHoacNguoiDang
                                                </p>
                                            </div>
                                            
                                            <!-- Status Badge -->
                                            <span class="status-badge @item.TrangThaiXuLyBadgeClass">
                                                <i class="fas fa-circle"></i>
                                                @item.TrangThaiXuLyDisplay
                                            </span>
                                        </div>

                                        <!-- Job Meta Info -->
                                        <div class="job-meta-info">
                                            <span title="Địa điểm"><i class="fas fa-map-marker-alt fa-fw text-danger"></i> @item.DiaDiemTinTuyenDung</span>
                                            <span title="Lương"><i class="fas fa-dollar-sign fa-fw text-success"></i> @item.MucLuongDisplayTinTuyenDung</span>
                                            <span title="Hạn nộp tin: @(ngayHetHanTinTuyenDungUtc.HasValue ? ngayHetHanTinTuyenDungUtc.Value.ToLocalTime().ToString("dd/MM/yyyy") : "Không giới hạn")">
                                                <i class="far fa-calendar-times fa-fw @(ngayHetHanTinTuyenDungUtc.HasValue && ngayHetHanTinTuyenDungUtc.Value.Date < DateTime.UtcNow.Date ? "text-danger" : "")"></i> 
                                                @if(ngayHetHanTinTuyenDungUtc.HasValue) {
                                                    @ngayHetHanTinTuyenDungUtc.Value.ToLocalTime().ToString("dd/MM/yyyy")
                                                } else { 
                                                    <text>KGH</text> 
                                                }
                                            </span>
                                        </div>

                                        <!-- Tags -->
                                        @if (item.TagsTinTuyenDung.Any())
                                        {
                                            <div class="mb-2">
                                                @foreach (var tag in item.TagsTinTuyenDung) 
                                                { 
                                                    <span class="report-tag">@tag</span> 
                                                }
                                            </div>
                                        }
                                        
                                        <!-- Report Reason Section -->
                                        <div class="report-reason-section mt-3">
                                            <div class="d-flex justify-content-between align-items-start">
                                                <p class="mb-1"><strong>Lý do báo cáo:</strong> <span class="report-reason-text">@item.LyDoBaoCaoDisplay</span></p>
                                                <small class="text-muted report-time" 
                                                       data-utc-date="@ngayBaoCaoUtc.ToString("o")" 
                                                       title="Gửi vào lúc: @ngayBaoCaoUtc.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")">
                                                    <i class="far fa-clock fa-fw"></i> <span class="timeago-placeholder">@TimeHelper.TimeAgo(ngayBaoCaoUtc)</span>
                                                </small>
                                            </div>
                                            
                                            @if (!string.IsNullOrWhiteSpace(item.ChiTietBaoCao))
                                            {
                                                <p class="report-detail-text">@item.ChiTietBaoCao</p>
                                            }
                                        </div>
                                        
                                        <!-- Admin Reply Section -->
                                        @if (!string.IsNullOrWhiteSpace(item.GhiChuAdmin))
                                        {
                                            <div class="admin-reply-section">
                                                <p class="small mb-1"><strong><i class="fas fa-user-shield me-1"></i> Phản hồi từ Admin:</strong></p>
                                                <p class="admin-message">@item.GhiChuAdmin</p>
                                                @if (ngayXuLyCuaAdminUtc.HasValue)
                                                {
                                                    <div class="d-flex justify-content-end">
                                                        <small class="text-muted" 
                                                               data-utc-date="@ngayXuLyCuaAdminUtc.Value.ToString("o")"
                                                               title="Lúc: @ngayXuLyCuaAdminUtc.Value.ToLocalTime().ToString("dd/MM/yyyy HH:mm:ss")">
                                                            <i class="far fa-clock fa-fw"></i> <span class="timeago-placeholder">@TimeHelper.TimeAgo(ngayXuLyCuaAdminUtc.Value)</span>
                                                        </small>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        else if(item.TrangThaiXuLy == TrangThaiXuLyBaoCao.daxemxet || item.TrangThaiXuLy == TrangThaiXuLyBaoCao.boqua)
                                        {
                                            <div class="alert alert-info py-2 mt-2 mb-0">
                                                <i class="fas fa-info-circle me-1"></i> Admin đang xem xét báo cáo của bạn.
                                            </div>
                                        }
                                    </div>
                                    
                                    <!-- Actions (Mobile Only) -->
                                    <div class="col-12 d-md-none mt-2">
                                        @if (item.CanDelete)
                                        {
                                            <button type="button" class="btn btn-sm btn-outline-danger btn-delete-report w-100" data-id="@item.BaoCaoId" title="Xóa báo cáo này">
                                                <i class="fas fa-trash-alt me-1"></i> Xóa
                                            </button>
                                        }
                                    </div>
                                </div>
                                
                                <!-- Actions (Desktop Only) -->
                                <div class="col-md-auto d-none d-md-block">
                                    @if (item.CanDelete)
                                    {
                                        <button type="button" class="btn btn-sm btn-outline-danger btn-delete-report" data-id="@item.BaoCaoId" title="Xóa báo cáo này">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <!-- Pagination -->
                @if (Model.BaoCaos.TotalPages > 1)
                {
                    <div class="pagination-container">
                        <nav aria-label="Page navigation" class="d-flex justify-content-center animate__animated animate__fadeInUp" style="animation-delay: 0.4s;">
                            <ul class="pagination pagination-sm flex-wrap">
                                @{
                                    // Dictionary chứa các tham số lọc cố định cho tất cả các link phân trang
                                    var fixedFilterRouteValues = new Dictionary<string, string?>();
                                    if (!string.IsNullOrWhiteSpace(Model.tuKhoa)) 
                                    { 
                                        fixedFilterRouteValues["tuKhoa"] = Model.tuKhoa; 
                                    }
                                    if (Model.trangThai.HasValue) 
                                    { 
                                        fixedFilterRouteValues["trangThai"] = Model.trangThai.Value.ToString(); 
                                    }
                                }

                                <!-- Nút Previous Page -->
                                <li class="page-item @(!Model.BaoCaos.HasPreviousPage ? "disabled" : "")">
                                    @{
                                        var prevPageRouteValues = new Dictionary<string, string?>(fixedFilterRouteValues);
                                        // Chỉ gán page nếu có trang trước đó
                                        if (Model.BaoCaos.HasPreviousPage)
                                        {
                                            prevPageRouteValues["page"] = (Model.BaoCaos.PageIndex - 1).ToString();
                                        }
                                    }
                                    <a class="page-link" asp-all-route-data="prevPageRouteValues!" asp-action="Index" aria-label="Previous">
                                        <span aria-hidden="true">«</span>
                                    </a>
                                </li>

                                @{
                                    // Logic tính toán startPage và endPage để hiển thị các nút số trang
                                    int currentPage = Model.BaoCaos.PageIndex;
                                    int totalPages = Model.BaoCaos.TotalPages;
                                    int pageRangeDisplayed = 5; 
                                    int startPage, endPage;

                                    if (totalPages <= pageRangeDisplayed)
                                    {
                                        startPage = 1;
                                        endPage = totalPages;
                                    }
                                    else
                                    {
                                        int maxPagesBeforeCurrentPage = (int)Math.Floor((decimal)pageRangeDisplayed / 2);
                                        int maxPagesAfterCurrentPage = (int)Math.Ceiling((decimal)pageRangeDisplayed / 2) - 1;

                                        if (currentPage <= maxPagesBeforeCurrentPage)
                                        {
                                            startPage = 1;
                                            endPage = pageRangeDisplayed;
                                        }
                                        else if (currentPage + maxPagesAfterCurrentPage >= totalPages)
                                        {
                                            startPage = totalPages - pageRangeDisplayed + 1;
                                            endPage = totalPages;
                                        }
                                        else
                                        {
                                            startPage = currentPage - maxPagesBeforeCurrentPage;
                                            endPage = currentPage + maxPagesAfterCurrentPage;
                                        }
                                    }

                                    // Nút First Page và dấu "..." (nếu cần)
                                    if (startPage > 1)
                                    {
                                        var firstPageRouteValues = new Dictionary<string, string?>(fixedFilterRouteValues) { ["page"] = "1" };
                                        <li class="page-item"><a class="page-link" asp-all-route-data="firstPageRouteValues!" asp-action="Index">1</a></li>
                                        if (startPage > 2)
                                        {
                                            <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                    }

                                    // Các nút số trang
                                    for (int i = startPage; i <= endPage; i++)
                                    {
                                        var pageNumRouteValues = new Dictionary<string, string?>(fixedFilterRouteValues) { ["page"] = i.ToString() };
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <a class="page-link" asp-all-route-data="pageNumRouteValues!" asp-action="Index">@i</a>
                                        </li>
                                    }

                                    // Nút Last Page và dấu "..." (nếu cần)
                                    if (endPage < totalPages)
                                    {
                                        if (endPage < totalPages - 1)
                                        {
                                            <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                        var lastPageRouteValues = new Dictionary<string, string?>(fixedFilterRouteValues) { ["page"] = totalPages.ToString() };
                                        <li class="page-item"><a class="page-link" asp-all-route-data="lastPageRouteValues!" asp-action="Index">@totalPages</a></li>
                                    }
                                }

                                <!-- Nút Next Page -->
                                <li class="page-item @(!Model.BaoCaos.HasNextPage ? "disabled" : "")">
                                    @{
                                        var nextPageRouteValues = new Dictionary<string, string?>(fixedFilterRouteValues);
                                         if (Model.BaoCaos.HasNextPage)
                                        {
                                            nextPageRouteValues["page"] = (Model.BaoCaos.PageIndex + 1).ToString();
                                        }
                                    }
                                    <a class="page-link" asp-all-route-data="nextPageRouteValues!" asp-action="Index" aria-label="Next">
                                        <span aria-hidden="true">»</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    </div>
                }
            </div>
        }
        else
        {
            <div id="emptyReportState" class="empty-state-custom animate__animated animate__fadeIn">
                <div class="icon">
                    <i class="far fa-folder-open fa-3x"></i>
                </div>
                @if (!string.IsNullOrWhiteSpace(Model.tuKhoa) || Model.trangThai.HasValue)
                {
                    <p class="lead">Không tìm thấy báo cáo nào khớp với bộ lọc của bạn.</p>
                    <p class="text-muted">Hãy thử thay đổi các tiêu chí lọc hoặc xóa bộ lọc.</p>
                    <div class="mt-3">
                        <a asp-controller="BaoCao" asp-action="Index" class="btn btn-sm btn-outline-primary me-2">
                            <i class="fas fa-times-circle me-1"></i> Xóa bộ lọc
                        </a>
                    </div>
                }
                else
                {
                    <p class="lead">Bạn chưa gửi báo cáo nào.</p>
                    <p class="text-muted">Nếu phát hiện tin tuyển dụng vi phạm, hãy báo cáo để chúng tôi xử lý.</p>
                    <div class="mt-3">
                        <a asp-controller="TimViec" asp-action="Index" class="btn btn-sm btn-primary">
                            <i class="fas fa-search me-1"></i> Tìm việc ngay
                        </a>
                    </div>
                }
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        // Hàm timeAgoSimple (Đã cung cấp ở các câu trả lời trước, đảm bảo nó có trong script của bạn)
        function timeAgoSimple(utcDateString) {
            if (!utcDateString) return 'N/A';
            const date = new Date(utcDateString); 
            const now = new Date(); 
            const seconds = Math.round(Math.abs(now - date) / 1000);

            const intervals = {
                year: 31536000, month: 2592000, week: 604800, day: 86400,
                hour: 3600, minute: 60, second: 1
            };
            let counter;
            if (seconds < 5) return 'vài giây trước';
            if (seconds < intervals.minute) return Math.floor(seconds) + ' giây trước';
            if (seconds < intervals.hour) { counter = Math.floor(seconds / intervals.minute); return counter + ' phút trước';}
            if (seconds < intervals.day) { counter = Math.floor(seconds / intervals.hour); return counter + ' giờ trước'; }
            if (seconds < intervals.week) { counter = Math.floor(seconds / intervals.day); return counter + ' ngày trước'; }
            if (seconds < intervals.month) { counter = Math.floor(seconds / intervals.week); return counter + ' tuần trước';}
            if (seconds < intervals.year) { counter = Math.floor(seconds / intervals.month); return counter + ' tháng trước';}
            counter = Math.floor(seconds / intervals.year); return counter + ' năm trước';
        }

        function updateAllTimeAgoPlaceholdersClient() {
            $('.timeago-placeholder').each(function() {
                const parentSmall = $(this).closest('small[data-utc-date]');
                const utcDateString = parentSmall.data('utc-date');
                if (utcDateString) {
                    $(this).text(timeAgoSimple(utcDateString));
                }
            });
        }

        $(function () {
            const csrfToken = '@requestToken';
            const reportListContainer = $('#reportListContainer');
            
            updateAllTimeAgoPlaceholdersClient(); 
            // setInterval(updateAllTimeAgoPlaceholdersClient, 60000); 

            reportListContainer.on('click', '.btn-delete-report', function () {
                const button = $(this);
                const baoCaoId = button.data('id');
                const reportItemCard = button.closest('.report-item-card');

                if (!baoCaoId || isNaN(parseInt(baoCaoId)) || parseInt(baoCaoId) <= 0) {
                    alert("Lỗi: ID báo cáo không hợp lệ.");
                    return;
                }

                if (confirm("Bạn chắc chắn muốn xóa báo cáo này? (Chỉ thực hiện được khi báo cáo còn 'Mới')")) {
                    button.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Đang xử lý...');

                    $.ajax({
                        url: '@Url.Action("XoaBaoCao", "BaoCao")',
                        type: 'POST',
                        contentType: 'application/json',
                        data: JSON.stringify(baoCaoId), 
                        headers: {
                            'RequestVerificationToken': csrfToken
                        },
                        success: function (response) {
                            if (response && response.success) {
                                alert(response.message || "Đã xóa báo cáo thành công.");
                                reportItemCard.fadeOut(500, function() { 
                                    $(this).remove();
                                     if (reportListContainer.find('.report-item-card').length === 0) { 
                                         window.location.reload(); 
                                     }
                                });
                            } else {
                                alert(response ? response.message : "Xóa báo cáo không thành công. Vui lòng thử lại.");
                                button.prop('disabled', false).html('<i class="fas fa-trash-alt fa-fw"></i> <span class="d-none d-sm-inline">Xóa</span>');
                            }
                        },
                        error: function (jqXHR) {
                            let errorMsg = "Đã xảy ra lỗi kết nối hoặc lỗi máy chủ.";
                            if (jqXHR.responseJSON && jqXHR.responseJSON.message) {
                                errorMsg = jqXHR.responseJSON.message;
                            } else if (jqXHR.status === 400) {
                                errorMsg = "Yêu cầu không hợp lệ hoặc báo cáo không thể xóa.";
                            } else if (jqXHR.status === 404) {
                                errorMsg = "Không tìm thấy báo cáo để xóa.";
                            }
                            alert(errorMsg);
                            button.prop('disabled', false).html('<i class="fas fa-trash-alt fa-fw"></i> <span class="d-none d-sm-inline">Xóa</span>');
                        }
                    });
                }
            });
        });
    </script>
}