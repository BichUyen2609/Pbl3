@model HeThongTimViec.ViewModels.TimViec.TimViecViewModel
@using HeThongTimViec.Extensions
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery antiforgery
@{
    ViewData["Title"] = "Tìm Việc Làm Part-time, Thời Vụ";
    var requestToken = antiforgery.GetAndStoreTokens(Context).RequestToken; // Lấy token cho AJAX
}

<div class="container mt-4">
    <h1>@ViewData["Title"]</h1>
    <p>Tìm kiếm cơ hội việc làm linh hoạt phù hợp với bạn.</p>
    <hr />

    <div class="row">
        @* --- Cột bộ lọc --- *@
        <div class="col-lg-3 mb-4 mb-lg-0">
            <div class="filter-section border rounded p-3 sticky-top" style="top: 20px;">
                <h4><i class="fas fa-filter me-2"></i>Bộ lọc tìm kiếm</h4>
                <hr />
                <form asp-action="Index" method="get" id="searchForm">
                    <div class="mb-3">
                        <label asp-for="TuKhoa" class="form-label fw-semibold">Từ khóa</label>
                        <input asp-for="TuKhoa" class="form-control form-control-sm" placeholder="Chức danh, kỹ năng, công ty..." />
                    </div>

                    <div class="mb-3">
                        <label asp-for="ThanhPhoId" class="form-label fw-semibold">Tỉnh/Thành phố</label>
                        <select asp-for="ThanhPhoId" asp-items="Model.ThanhPhoOptions" class="form-select form-select-sm" id="ThanhPhoSelect">
                            <option value="">-- Tất cả Tỉnh/TP --</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="QuanHuyenId" class="form-label fw-semibold">Quận/Huyện</label>
                        <select asp-for="QuanHuyenId" asp-items="Model.QuanHuyenOptions" class="form-select form-select-sm" id="QuanHuyenSelect" disabled="@(!Model.ThanhPhoId.HasValue || Model.ThanhPhoId <= 0)">
                            <option value="">-- Chọn Quận/Huyện --</option>
                        </select>
                        <small id="QuanHuyenLoading" style="display: none;" class="text-muted">Đang tải...</small>
                    </div>

                    <div class="mb-3">
                        <label asp-for="NganhNgheIds" class="form-label fw-semibold">Ngành nghề</label>
                        <div class="border rounded p-2" style="max-height: 200px; overflow-y: auto;">
                            @if (Model.NganhNgheOptions != null && Model.NganhNgheOptions.Any())
                            {
                                @foreach (var nganhNghe in Model.NganhNgheOptions)
                                {
                                    <div class="form-check form-check-sm">
                                        @* Sử dụng checked thủ công vì NganhNgheOptions là List<SelectListItem> *@
                                        <input class="form-check-input" type="checkbox" name="NganhNgheIds" value="@nganhNghe.Value" id="nn_@nganhNghe.Value" @(nganhNghe.Selected ? "checked" : "")>
                                        <label class="form-check-label" for="nn_@nganhNghe.Value">
                                            @nganhNghe.Text
                                        </label>
                                    </div>
                                }
                            }
                            else
                            {
                                <small class="text-muted">Không có dữ liệu ngành nghề.</small>
                            }
                        </div>
                    </div>


                    <div class="mb-3">
                        <label asp-for="LoaiHinhCongViec" class="form-label fw-semibold">Loại hình công việc</label>
                        <select asp-for="LoaiHinhCongViec" asp-items="Model.LoaiHinhCongViecOptions" class="form-select form-select-sm"></select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="LoaiLuong" class="form-label fw-semibold">Loại lương</label>
                        <select asp-for="LoaiLuong" asp-items="Model.LoaiLuongOptions" class="form-select form-select-sm"></select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="LuongMin" class="form-label fw-semibold">Mức lương tối thiểu (VNĐ)</label>
                        <input asp-for="LuongMin" type="number" min="0" step="100000" class="form-control form-control-sm" placeholder="VD: 5000000" />
                        <small class="text-muted d-block">Áp dụng khi chọn Loại lương cụ thể.</small>
                    </div>

                    @* --- SỬA LỖI Checkbox cho bool? TinGap --- *@
                    <div class="mb-3 form-check">
                         <input type="checkbox" class="form-check-input" name="TinGap" value="true" id="tingapCheck" @(Model.TinGap == true ? "checked" : "") />
                         <label class="form-check-label" for="tingapCheck">Chỉ hiển thị tin gấp</label>
                    </div>


                    <div class="d-grid gap-2 mt-4">
                        <button type="submit" class="btn btn-primary btn-sm"><i class="fas fa-search me-1"></i> Tìm kiếm</button>
                        <a asp-action="Index" asp-controller="TimViec" class="btn btn-outline-secondary btn-sm">Xóa bộ lọc</a>
                    </div>
                </form>
            </div>
        </div>

        @* --- Cột kết quả --- *@
        <div class="col-lg-9">
            <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap gap-2">
                <div>
                    @if (Model.KetQua != null && Model.KetQua.TotalCount > 0)
                    {
                        <span class="fw-bold">Tìm thấy @Model.KetQua.TotalCount kết quả</span>
                        <span class="text-muted"> (Trang @Model.KetQua.PageIndex / @Model.KetQua.TotalPages)</span>
                    }
                    else
                    {
                        <span class="fw-bold">Không tìm thấy kết quả nào phù hợp.</span>
                    }
                </div>
                <div>
                     <form asp-action="Index" method="get" id="sortForm" class="d-inline-block">
                         @* Truyền lại các tham số lọc hiện tại vào form sắp xếp *@
                         <input type="hidden" asp-for="TuKhoa" />
                         <input type="hidden" asp-for="ThanhPhoId" />
                         <input type="hidden" asp-for="QuanHuyenId" />
                         @if (Model.NganhNgheIds != null) { foreach (var id in Model.NganhNgheIds) { <input type="hidden" name="NganhNgheIds" value="@id" /> } }
                         <input type="hidden" asp-for="LoaiHinhCongViec" />
                         <input type="hidden" asp-for="LoaiLuong" />
                         <input type="hidden" asp-for="LuongMin" />
                         @* Truyền lại TinGap nếu có giá trị *@
                         @if (Model.TinGap.HasValue) { <input type="hidden" name="TinGap" value="@Model.TinGap.Value.ToString().ToLower()" /> }


                         <label for="SapXepSelect" class="visually-hidden">Sắp xếp theo</label>
                        <select asp-for="SapXep" id="SapXepSelect" class="form-select form-select-sm d-inline-block w-auto" onchange="this.form.submit()">
                            <option value="ngaymoi" selected="@(Model.SapXep == "ngaymoi" || string.IsNullOrEmpty(Model.SapXep))">Mới nhất</option>
                            <option value="luongcao" selected="@(Model.SapXep == "luongcao")">Lương cao nhất</option>
                        </select>
                    </form>
                </div>
            </div>

            <div class="job-list">
                @if (Model.KetQua != null && Model.KetQua.Any())
                {
                    @foreach (var item in Model.KetQua)
                    {
                        @* Gọi Partial View để hiển thị từng tin *@
                        @await Html.PartialAsync("_TinTuyenDungItem", item)
                    }

                    <!-- Pagination Controls -->
                    @if (Model.KetQua.TotalPages > 1)
                    {
                        <nav aria-label="Page navigation">
                            <ul class="pagination justify-content-center flex-wrap">
                                <li class="page-item @(!Model.KetQua.HasPreviousPage ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Index", "TimViec", new {
                                          page = Model.KetQua.PageIndex - 1,
                                          Model.TuKhoa, Model.ThanhPhoId, Model.QuanHuyenId,
                                          Model.LoaiHinhCongViec, Model.LoaiLuong, Model.LuongMin,
                                          Model.TinGap, Model.SapXep
                                      })@Html.Raw(Model.NganhNgheIds != null && Model.NganhNgheIds.Any() ? "&" + string.Join("&", Model.NganhNgheIds.Select(id => $"NganhNgheIds={id}")) : "")" aria-label="Previous">
                                        <span aria-hidden="true">«</span>
                                    </a>
                                </li>

                                @{
                                    int startPage = Math.Max(1, Model.KetQua.PageIndex - 2);
                                    int endPage = Math.Min(Model.KetQua.TotalPages, Model.KetQua.PageIndex + 2);

                                    if (startPage > 1)
                                    {
                                        <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TimViec", new { page = 1, Model.TuKhoa, Model.ThanhPhoId, Model.QuanHuyenId, Model.LoaiHinhCongViec, Model.LoaiLuong, Model.LuongMin, Model.TinGap, Model.SapXep })@Html.Raw(Model.NganhNgheIds != null && Model.NganhNgheIds.Any() ? "&" + string.Join("&", Model.NganhNgheIds.Select(id => $"NganhNgheIds={id}")) : "")">1</a></li>
                                        if (startPage > 2)
                                        {
                                            <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                    }

                                    for (int i = startPage; i <= endPage; i++)
                                    {
                                        <li class="page-item @(i == Model.KetQua.PageIndex ? "active" : "")">
                                            <a class="page-link" href="@Url.Action("Index", "TimViec", new {
                                                  page = i, Model.TuKhoa, Model.ThanhPhoId, Model.QuanHuyenId,
                                                  Model.LoaiHinhCongViec, Model.LoaiLuong, Model.LuongMin,
                                                  Model.TinGap, Model.SapXep
                                              })@Html.Raw(Model.NganhNgheIds != null && Model.NganhNgheIds.Any() ? "&" + string.Join("&", Model.NganhNgheIds.Select(id => $"NganhNgheIds={id}")) : "")">@i</a>
                                        </li>
                                    }

                                     if (endPage < Model.KetQua.TotalPages)
                                    {
                                        if (endPage < Model.KetQua.TotalPages - 1)
                                        {
                                             <li class="page-item disabled"><span class="page-link">...</span></li>
                                        }
                                         <li class="page-item"><a class="page-link" href="@Url.Action("Index", "TimViec", new { page = Model.KetQua.TotalPages, Model.TuKhoa, Model.ThanhPhoId, Model.QuanHuyenId, Model.LoaiHinhCongViec, Model.LoaiLuong, Model.LuongMin, Model.TinGap, Model.SapXep })@Html.Raw(Model.NganhNgheIds != null && Model.NganhNgheIds.Any() ? "&" + string.Join("&", Model.NganhNgheIds.Select(id => $"NganhNgheIds={id}")) : "")">@Model.KetQua.TotalPages</a></li>
                                    }
                                }

                                <li class="page-item @(!Model.KetQua.HasNextPage ? "disabled" : "")">
                                    <a class="page-link" href="@Url.Action("Index", "TimViec", new {
                                          page = Model.KetQua.PageIndex + 1,
                                          Model.TuKhoa, Model.ThanhPhoId, Model.QuanHuyenId,
                                          Model.LoaiHinhCongViec, Model.LoaiLuong, Model.LuongMin,
                                          Model.TinGap, Model.SapXep
                                      })@Html.Raw(Model.NganhNgheIds != null && Model.NganhNgheIds.Any() ? "&" + string.Join("&", Model.NganhNgheIds.Select(id => $"NganhNgheIds={id}")) : "")" aria-label="Next">
                                        <span aria-hidden="true">»</span>
                                    </a>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <div class="alert alert-warning text-center" role="alert">
                        <i class="fas fa-exclamation-triangle me-2"></i>Không tìm thấy công việc nào phù hợp với tiêu chí của bạn. Vui lòng thử lại với bộ lọc khác.
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        // Sử dụng $(function() { ... }) là cách viết tắt cho $(document).ready()
        $(function () {

            console.log("Document ready. Initializing scripts."); // <-- CHECK: Script có chạy không?

            // --- Khai báo biến dùng chung ---
            const thanhPhoSelect = $('#ThanhPhoSelect');
            const quanHuyenSelect = $('#QuanHuyenSelect');
            const quanHuyenLoading = $('#QuanHuyenLoading');
            const apiDiaChiUrl = '/api/DiaChi/GetQuanHuyenByThanhPho'; // Đảm bảo URL đúng
            const csrfToken = '@requestToken'; // Lấy token từ Razor

            // Kiểm tra CSRF Token ngay từ đầu
            if (!csrfToken) {
                console.error("FATAL: CSRF Token not found in Razor! AJAX requests requiring validation will fail.");
                 // Có thể hiển thị lỗi cố định trên trang nếu token bị thiếu nghiêm trọng
                 // $('#someErrorContainer').text("Lỗi cấu hình bảo mật. Vui lòng liên hệ quản trị viên.");
            } else {
                console.log("CSRF Token loaded.");
            }


            // --- Hàm load quận huyện ---
            function loadQuanHuyen(thanhPhoId, selectedQuanHuyenId) {
                console.log(`Loading districts for city ID: ${thanhPhoId}, selected district: ${selectedQuanHuyenId}`);
                quanHuyenSelect.prop('disabled', true);
                quanHuyenLoading.show();
                quanHuyenSelect.html('<option value="">-- Chọn Quận/Huyện --</option>');

                if (thanhPhoId && thanhPhoId !== "") {
                    $.ajax({
                        url: apiDiaChiUrl,
                        type: 'GET',
                        data: { thanhPhoId: thanhPhoId },
                        success: function (data) {
                            console.log("District data received:", data);
                            if (data && data.length > 0) {
                                $.each(data, function (index, item) {
                                    const option = $('<option></option>').val(item.id).text(item.ten);
                                    if (selectedQuanHuyenId && item.id == selectedQuanHuyenId) {
                                        option.prop('selected', true);
                                        console.log(`District ${item.id} (${item.ten}) selected.`);
                                    }
                                    quanHuyenSelect.append(option);
                                });
                                quanHuyenSelect.prop('disabled', false);
                            } else {
                                console.log("No districts found for city ID:", thanhPhoId);
                            }
                        },
                        error: function (jqXHR, textStatus, errorThrown) {
                            console.error("Error loading districts:", textStatus, errorThrown);
                            alert("Lỗi tải danh sách Quận/Huyện. Vui lòng thử lại sau.");
                        },
                        complete: function () {
                            quanHuyenLoading.hide();
                            console.log("District loading complete.");
                        }
                    });
                } else {
                    console.log("No city selected, skipping district load.");
                    quanHuyenLoading.hide(); // Ẩn loading nếu không có thành phố
                }
            }

            // --- Xử lý khi thay đổi Thành phố ---
            thanhPhoSelect.on('change', function () {
                console.log("City selection changed.");
                const selectedThanhPhoId = $(this).val();
                loadQuanHuyen(selectedThanhPhoId, null); // Load mới, không cần ID quận cũ
            });

            // --- Load quận huyện ban đầu nếu có thành phố được chọn sẵn ---
            const initialThanhPhoId = thanhPhoSelect.val();
            const initialQuanHuyenId = quanHuyenSelect.val(); // Lấy giá trị đã được render từ server
            console.log(`Initial City ID: ${initialThanhPhoId}, Initial District ID: ${initialQuanHuyenId}`);
            if (initialThanhPhoId && initialThanhPhoId !== "") {
                 if(quanHuyenSelect.find('option').length > 1 && initialQuanHuyenId) {
                     console.log("Districts already rendered by server. Enabling select.");
                     quanHuyenSelect.prop('disabled', false);
                 } else if (quanHuyenSelect.find('option').length <= 1) {
                      // Chỉ gọi load nếu server chưa render sẵn quận huyện
                      console.log("Districts not rendered by server. Loading via AJAX.");
                      loadQuanHuyen(initialThanhPhoId, initialQuanHuyenId);
                 } else {
                      // Đã có TP nhưng chưa chọn QH, vẫn bật select lên
                      quanHuyenSelect.prop('disabled', false);
                 }
            }


            // --- Xử lý Lưu/Bỏ Lưu Tin (AJAX - Event Delegation) ---
             console.log("Attaching click handler for save/unsave buttons using delegation on '.job-list'.");
             $('.job-list').on('click', '.btn-save-job, .btn-unsave-job', function (e) {
                 e.preventDefault(); // Ngăn hành động mặc định (quan trọng nếu nút là thẻ <a>)
                 console.log("--- Save/Unsave Button Clicked ---"); // <-- CHECK 1

                 const button = $(this);
                 const tinId = button.data('id');
                 console.log("Target Button:", button[0]); // Log phần tử DOM để kiểm tra
                 console.log("Attempting action for Tin ID:", tinId); // <-- CHECK 2

                 // Kiểm tra ID
                 if (!tinId || isNaN(parseInt(tinId)) || parseInt(tinId) <= 0) {
                     console.error("Invalid or missing data-id attribute on the button.");
                     alert("Lỗi: Không thể xác định ID của tin tuyển dụng. Vui lòng kiểm tra lại HTML.");
                     return; // Dừng lại
                 }

                 // Kiểm tra CSRF Token
                 if (!csrfToken) {
                     console.error("CSRF Token is missing. Aborting AJAX request.");
                     alert("Lỗi bảo mật. Không thể thực hiện yêu cầu. Vui lòng tải lại trang.");
                     return;
                 }

                 const isSaving = button.hasClass('btn-save-job');
                 const actionText = isSaving ? "Lưu" : "Bỏ lưu";
                 const url = isSaving ? '@Url.Action("LuuTin", "TimViec")' : '@Url.Action("BoLuuTin", "TimViec")';
                 const icon = button.find('i'); // Tìm icon bên trong nút
                 const originalIconClass = icon.length > 0 ? icon.attr('class') : 'far fa-heart fa-fw'; // Fallback nếu ko có icon

                 console.log(`Action: ${actionText}, Tin ID: ${tinId}, URL: ${url}`); // <-- CHECK 3

                 // --- Bắt đầu AJAX ---
                 button.prop('disabled', true); // Vô hiệu hóa nút
                 // Thay đổi giao diện nút để báo đang xử lý
                 if (icon.length > 0) {
                     icon.removeClass().addClass('fas fa-spinner fa-spin');
                     console.log("Icon changed to spinner.");
                 } else {
                     // Nếu không có icon, thêm spinner vào đầu nút
                      button.prepend('<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>');
                      console.log("Spinner prepended to button.");
                 }


                 console.log("Sending AJAX request..."); // <-- CHECK 4
                 $.ajax({
                     url: url,
                     type: 'POST',
                     contentType: 'application/json', // Quan trọng cho [FromBody]
                     data: JSON.stringify(parseInt(tinId)), // Gửi ID dạng số trong JSON string
                     headers: {
                         'RequestVerificationToken': csrfToken // Gửi token trong header
                     },
                     success: function (response) {
                         console.log("AJAX Success Response:", response); // <-- CHECK 5
                         button.find('.spinner-border').remove(); // Xóa spinner nếu có

                         if (response && response.success) {
                             console.log(`Server confirmed: ${actionText} tin thành công.`);
                             // Cập nhật giao diện nút thành công
                             if (isSaving) {
                                 button.removeClass('btn-save-job btn-outline-success').addClass('btn-unsave-job btn-success');
                                 if(icon.length > 0) icon.removeClass().addClass('fas fa-heart fa-fw'); // Icon đã lưu
                                 button.attr('title', 'Bỏ lưu tin này');
                                 console.log("Button UI updated to 'Unsave' state.");
                             } else {
                                 button.removeClass('btn-unsave-job btn-success').addClass('btn-save-job btn-outline-success');
                                 if(icon.length > 0) icon.removeClass().addClass('far fa-heart fa-fw'); // Icon chưa lưu
                                 button.attr('title', 'Lưu tin này');
                                 console.log("Button UI updated to 'Save' state.");
                             }
                             // Optional: Hiển thị thông báo toast
                             // toastr.success(response.message || `${actionText} tin thành công!`);
                         } else {
                             // Server trả về success: false hoặc response không đúng cấu trúc
                             console.error("Server returned success:false or invalid response:", response);
                              if(icon.length > 0) icon.removeClass().addClass(originalIconClass); // Khôi phục icon
                             alert(response ? response.message : "Đã xảy ra lỗi không mong muốn từ máy chủ. Vui lòng thử lại.");
                         }
                     },
                     error: function (jqXHR, textStatus, errorThrown) {
                         console.error("AJAX Error Details:", { // <-- CHECK 6
                            status: jqXHR.status,
                            statusText: jqXHR.statusText,
                            responseText: jqXHR.responseText, // Xem chi tiết lỗi từ server (nếu có)
                            textStatus: textStatus,
                            errorThrown: errorThrown
                         });
                         button.find('.spinner-border').remove(); // Xóa spinner
                         if(icon.length > 0) icon.removeClass().addClass(originalIconClass); // Khôi phục icon

                         // Hiển thị thông báo lỗi
                        let errorMsg = `Đã xảy ra lỗi khi ${actionText.toLowerCase()} tin.`;
                        if (jqXHR.status === 0) {
                             errorMsg = "Không thể kết nối đến máy chủ. Vui lòng kiểm tra mạng.";
                        } else if (jqXHR.status === 401) {
                            errorMsg = "Vui lòng đăng nhập để thực hiện hành động này.";
                        } else if (jqXHR.status === 403) {
                            errorMsg = "Bạn không có quyền thực hiện hoặc lỗi bảo mật (CSRF Token?).";
                        } else if (jqXHR.status === 400) {
                            try {
                                const errorResponse = JSON.parse(jqXHR.responseText);
                                errorMsg = errorResponse.message || "Yêu cầu không hợp lệ.";
                            } catch (e) { errorMsg = "Yêu cầu không hợp lệ (400)."; }
                        } else if (jqXHR.status === 404) {
                            errorMsg = "Không tìm thấy tài nguyên yêu cầu (404).";
                        } else if (jqXHR.status >= 500) {
                             errorMsg = "Lỗi máy chủ nội bộ (5xx). Vui lòng thử lại sau.";
                        } else {
                             errorMsg += ` (${jqXHR.status}: ${jqXHR.statusText})`;
                        }
                        alert(errorMsg);
                     },
                     complete: function (jqXHR, textStatus) {
                         console.log(`AJAX request completed with status: ${textStatus}`); // <-- CHECK 7
                         // Luôn bật lại nút bất kể thành công hay thất bại
                         button.prop('disabled', false);
                         console.log("Button re-enabled.");
                         console.log("--- End Save/Unsave Button Click ---");
                     }
                 }); // Kết thúc $.ajax
             }); // Kết thúc event handler .on('click', ...)

             console.log("Event handlers attached.");

        }); // Kết thúc $(function() { ... })
    </script>
}